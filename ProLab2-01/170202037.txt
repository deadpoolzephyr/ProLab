import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

public class ProLab21 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		ProLab21 ms = new ProLab21();
		BufferedReader oku;
        String dosya = "Harita.txt";

		Lokasyon loc = new Lokasyon();
		Karakter cha = new Karakter();
		
		try{
            oku = new BufferedReader(new FileReader(dosya));
            String satir = oku.readLine();
            int lineNumber = 0;
            while (satir != null) {
            	
            	if(lineNumber > 2){
            		//String satirTrimmed = satir.replace("	", "");
            	
            		
            		
            		
            		
            		
            	
            	
            	
            	
            	satir = oku.readLine();
                lineNumber++;
            }
            oku.close();
        }
		}
		catch (IOException e){
            System.out.println(dosya+" adli dosya okunamiyor.");
        }
	}
	
	public static boolean YolAra(int[][] lab, int x, int y, List<Integer> yol) {
        
        if (lab[x][y] == lab[9][13]) {
        	yol.add(x);
        	yol.add(y);
            return true;
        }
        
        if (lab[x][y] == 0) {
            lab[x][y] = 2;
            
            int dx = -1;
            int dy = 0;
            if (YolAra(lab, x + dx, y + dy, yol)) {
            	yol.add(x);
            	yol.add(y);
                return true;
            }

            dx = 1;
            dy = 0;
            if (YolAra(lab, x + dx, y + dy, yol)) {
            	yol.add(x);
            	yol.add(y);
                return true;
            }

            dx = 0;
            dy = -1;
            if (YolAra(lab, x + dx, y + dy, yol)) {
            	yol.add(x);
            	yol.add(y);
                return true;
            }

            dx = 0;
            dy = 1;
            if (YolAra(lab, x + dx, y + dy, yol)) {
            	yol.add(x);
            	yol.add(y);
                return true;
            }
        }
        return false;
    }

	
		

}










/*

private char [][] lab = null;
	    private BufferedReader br = null;
	    private File f;
	    private int yukseklik = 0;
	    private int genislik = 0;

	    public static void main(String[] args) {

	        ProLab21 ms = new ProLab21();
	        String dosya = "Harita.txt";
	        ms.buildMap(dosya);
	        ms.formatMaze();
	    }   

	    private void buildMap(String file) {

	        char temp;
	        String line = null;
	        int count = 1;
	        int heightCounter = 0;
	        try {
	            f = new File(file);
	            if(!f.exists() || f.isDirectory()) {
	                throw new FileNotFoundException();
	            }

	            //Read each file line to populate necessary variables and maze coordinates
	            br = new BufferedReader(new FileReader(file));
	            while((line = br.readLine()) != null) {
	                switch (count) {
	                case (1):
	                	genislik = Integer.parseInt(line.substring(0, line.indexOf(' ')));
	                	yukseklik = Integer.parseInt((line.substring(line.indexOf(' ')+1)));
	                	lab = new char[yukseklik][genislik];
	                    break;
	                default:
	                    int counter = 0;
	                    for (int i = 0; i < line.length(); i++){
	                        if(line.charAt(i) != ' '){
	                        	lab[heightCounter][counter] = line.charAt(i);
	                            counter++;
	                        }
	                    }
	                    heightCounter++;
	                    break;
	                }
	                count++;
	            }
	        }
	        catch(FileNotFoundException fnfe) {
	            System.out.println("The file : " + f.getName() + " does not exist" );
	            fnfe.printStackTrace();         
	        }
	        catch(IOException ioe) {
	            ioe.printStackTrace();
	        }
	        catch(ArrayIndexOutOfBoundsException aioob){
	            aioob.printStackTrace();
	        }
	    }

	     
	    private void formatMaze() {

	        for (int i = 0; i < yukseklik; i++) {
	            for(int j = 0; j < genislik; j++) {

	                if(lab[i][j] == '1') {
	                	lab[i][j] = '#';
	                }

	                if(lab[i][j] == '0') {
	                	lab[i][j] = ' ';
	                }
	            }  
	        }       
	    }


*/



///////////////////////////////////////////////////////////////////////////////////////



import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

public class Lokasyon extends JPanel{

	

	private int [][] lab = 
        { {0,0,0,0,1,0,0,0,0,0,0,0,1,0},
          {0,1,1,1,1,0,1,1,1,1,1,1,1,0},
          {0,1,0,1,1,1,1,0,1,0,0,0,1,0},
          {0,1,0,1,1,0,1,0,1,1,0,1,1,0},
          {0,1,0,1,0,0,1,0,1,1,0,1,1,0},
          {1,1,0,1,1,1,2,0,1,0,0,0,1,1},
          {0,1,0,0,1,0,1,0,1,0,1,1,1,0},
          {0,1,0,1,1,1,1,1,1,0,0,0,1,0},
          {0,1,0,1,0,0,0,0,1,0,0,1,1,0},
          {0,1,1,1,1,1,1,1,1,1,1,1,1,9},
          {0,0,0,0,1,0,0,0,0,0,0,0,0,0}
        };
  
    private final List<Integer> yol = new ArrayList<Integer>();
    private int pathIndex;
    
    public Lokasyon() {
        setTitle("Star Wars");
        setSize(1280, 720);
        setLocation(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        ProLab21.YolAra(lab, 1, 1, yol);
        pathIndex = yol.size() - 2;
    }

    private void setDefaultCloseOperation(int exitOnClose) {
		// TODO Auto-generated method stub
		
	}

	private void setTitle(String string) {
		// TODO Auto-generated method stub
		
	}

	
    public void paint(Graphics g) {
        super.paint(g);
        
        g.translate(50, 50);
        
       
        for (int row = 0; row < lab.length; row++) {
            for (int col = 0; col < lab[0].length; col++) {
                Color color;
                switch (lab[row][col]) {
                    case 1 : color = Color.GRAY; break;
                    case 9 : color = Color.RED; break;
                    case 2 : color = Color.YELLOW; break;
                    default : color = Color.WHITE;
                }
                g.setColor(color);
                g.fillRect(30 * col, 30 * row, 30, 30);
                g.setColor(Color.BLACK);
                g.drawRect(30 * col, 30 * row, 30, 30);
            }
        }
        
        
        for (int p = 0; p < yol.size(); p += 2) {
            int yolX = yol.get(p);
            int yolY = yol.get(p + 1);
            g.setColor(Color.GREEN);
            g.fillRect(yolX * 30, yolY * 30, 30, 30);
        }

        
        int yolX = yol.get(pathIndex);
        int yolY = yol.get(pathIndex + 1);
        g.setColor(Color.RED);
        g.fillOval(yolX * 30, yolY * 30, 30, 30);
    }
    
    
    protected void processKeyEvent(KeyEvent ke) {
        if (ke.getID() != KeyEvent.KEY_PRESSED) {
            return;
        }
        if (ke.getKeyCode() == KeyEvent.VK_RIGHT) {
            pathIndex -= 2;
            if (pathIndex < 0) {
                pathIndex = 0;
            }
        }
        else if (ke.getKeyCode() == KeyEvent.VK_LEFT) {
            pathIndex += 2;
            if (pathIndex > yol.size() - 2) {
                pathIndex = yol.size() - 2;
            }
        }
        repaint(); 
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Lokasyon view = new Lokasyon();
                view.setVisible(true);
            }
        });
    }

}

///////////////////////////////////////////////////////////////////////////////////////

public class Karakter {

	public Karakter() {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String ad;
	    String tur;
	    
	    DarthVader Darth = new DarthVader();
	    KyloRen Kylo = new KyloRen();
	    Stormtrooper Storm = new Stormtrooper();
	    MasterYoda Master = new MasterYoda();
	    LukeSkywalker Luke = new LukeSkywalker();
	    
	    
	}

}

///////////////////////////////////////////////////////////////////////////////////////

public class DarthVader {

	public DarthVader() {
		// TODO Auto-generated constructor stub
	}

	

}

///////////////////////////////////////////////////////////////////////////////////////

public class KyloRen {

	public KyloRen() {
		// TODO Auto-generated constructor stub
	}

	

}

///////////////////////////////////////////////////////////////////////////////////////

public class Stormtrooper {

	public Stormtrooper() {
		// TODO Auto-generated constructor stub
	}

	

}

///////////////////////////////////////////////////////////////////////////////////////


public class MasterYoda {

	public MasterYoda() {
		// TODO Auto-generated constructor stub
	}

	public void Can() {
		int life = 6;
		
	}

}

///////////////////////////////////////////////////////////////////////////////////////


public class LukeSkywalker {

	public LukeSkywalker() {
		// TODO Auto-generated constructor stub
	}

	public void Can() {
		int life = 3;
		
	}

}
