package prolab04;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class ProLab04 {

    public static void main(String[] args){
        // TODO code application logic here
        
        String dosyaAdi = "VeriKumesi.txt";
        BufferedReader oku;
        List<String> categories = new ArrayList<>();
        Map<String,Integer> allUsers = new HashMap<>();
        Map<String,Integer> allCategories = new HashMap<>();
        Map<String,Integer> allCategoryValues = new HashMap<>();
        Map<String,Integer> allSubCategoryValues = new HashMap<>();
        Scanner sc = new Scanner(System.in);
        String Kat;
        
        try{
            oku = new BufferedReader(new FileReader(dosyaAdi));
            String satir = oku.readLine();
            int lineNumber = 0;
            
            System.out.println("Kategori giriniz: ");
                Kat = sc.nextLine();
            
            while (satir != null) {

                String satirTrimmed = satir.replace(" ", "");
                
                if(lineNumber > 1){
                    String userId = "";
                    String placeId = "";
                    String dateTime = "";
                    String lat = "";
                    String lon = "";
                    String city = "";
                    String categoryBase = "";
                    String category = "";
                    String categoryValue = "";
                    String subCategoryValue = "";

                    String[] satirBolum = satirTrimmed.split(",");

                    if(satirBolum.length > 1){
                        userId = satirBolum[0];
                        placeId = satirBolum[1];
                        dateTime = satirBolum[2];
                        lat = satirBolum[3];
                        lon = satirBolum[4];
                        city = satirBolum[5];
                        categoryBase = satirBolum[6];
                        
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
                        try{  
                            Date date = sdf.parse(dateTime);
                            long millis = date.getTime();
                            String miliseconds = String.valueOf(millis);
                            //System.out.println(dateTime);
                            //System.out.println(miliseconds);
                        }catch(ParseException pe){
                            pe.printStackTrace();
                        }
                        
                        for(int i=0; i<satirBolum.length; i++){
                            String deger = satirBolum[i];

                            if(i == 6){
                                String[] degerBolum = deger.split(":");
                                if(degerBolum.length > 1){
                                    category = degerBolum[0];
                                    categoryValue = degerBolum[1];
                                    
                                    if(allUsers.containsKey(userId)){
                                        int userVal = allUsers.get(userId);
                                        allUsers.replace(userId,(userVal+1));
                                    }else{
                                        allUsers.put(userId,1);
                                    }
                                    
                                    if(allCategories.containsKey(category)){
                                        int catVal = allCategories.get(category);
                                        allCategories.replace(category,(catVal+1));
                                    }else{
                                        allCategories.put(category,1);
                                    }
                                    
                                    if(allCategoryValues.containsKey(categoryValue)){
                                        int catValu = allCategoryValues.get(categoryValue);
                                        allCategoryValues.replace(categoryValue,(catValu+1));
                                    }else{
                                        allCategoryValues.put(categoryValue,1);
                                    }
                                    
                                    if(degerBolum.length > 2){
                                        subCategoryValue = degerBolum[2];
                                    }

                                    for(int j=0; j<degerBolum.length; j++){
                                        String altDeger = degerBolum[j];
                                    }
                                    
                                    if(allSubCategoryValues.containsKey(subCategoryValue)){
                                        int subCatVal = allSubCategoryValues.get(subCategoryValue);
                                        allSubCategoryValues.replace(subCategoryValue,(subCatVal+1));
                                    }else{
                                        allSubCategoryValues.put(subCategoryValue,1);
                                    }
                                    
                                    
                                    
                                    if(Kat.equalsIgnoreCase(categoryBase)){
                                        //System.out.println(categoryBase);
                                    }
                                    
                                    
                                    
                                }
                            }
                        }
                    }

                    //System.out.println("UserId: " + userId + " | " + "PlaceId: " + placeId + " | " + "Datetime: " + dateTime + " | " + "Lat: " + lat + " | " + "Lon: " + lon + " | " + "City: " + city + " | " + "Category: " + category + " | " + "Category Value: " + categoryValue + " | " + "SubCategoryValue: " + subCategoryValue);
                    //System.out.println("Category: " + category + " | " + "Category Value: " + categoryValue + " | " + "SubCategoryValue: " + subCategoryValue);                    
                }
                satir = oku.readLine();
                lineNumber++;                
            }
            oku.close();
        }
        catch (IOException e){
            System.out.println(dosyaAdi+" adli dosya okunamiyor.");
        }
        
        Map<String, Integer> UserMap = sortByValue(allUsers);
        Map<String, Integer> CategoryMap = sortByValue(allCategories);
        Map<String, Integer> CategoryValueMap = sortByValue(allCategoryValues);
        Map<String, Integer> SubCategoryValueMap = sortByValue(allSubCategoryValues);
        
        /*Integer mapVal = CategoryMap.get((CategoryMap.keySet().toArray())[0]);
        String mapKey = ((CategoryMap.keySet().toArray())[0]).toString();        
        System.out.println(mapKey);*/
        
        //printMap(UserMap);
        printMap(CategoryMap);
        printMap(CategoryValueMap);
        printMap(SubCategoryValueMap);

    }
    
    private static Map<String, Integer> sortByValue(Map<String, Integer> unsortMap) {
        List<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(unsortMap.entrySet());

        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1,
                               Map.Entry<String, Integer> o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });

        Map<String, Integer> sortedMap = new LinkedHashMap<String, Integer>();
        for (Map.Entry<String, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        return sortedMap;
    }
    
    public static <K, V> void printMap(Map<K, V> map) {
        int i=0;
        for (Map.Entry<K, V> entry : map.entrySet()) {
            //System.out.println(entry.getKey() + " [" + entry.getValue() + "]");
            System.out.println(i + "-" + entry.getKey());
            i++;
        }
    }
    
    /*
        public class MaxHeap {

        int[] Heap;
        int size;
        int maxsize;

        private static final int FRONT = 1;

        public MaxHeap(int maxsize)
        {
            this.maxsize = maxsize;
            this.size = 0;
            Heap = new int[this.maxsize + 1];
            Heap[0] = Integer.MAX_VALUE;
        }

        private int parent(int position)
        {
            return position / 2;
        }

        private int leftChild(int position)
        {
            return (2 * position);
        }

        private int rightChild(int position)
        {
            return (2 * position) + 1;
        }

        private boolean isLeaf(int position)
        {
            if (position >=  (size / 2)  &&  position <= size)
            {
                return true;
            }
            return false;
        }

        private void swap(int fpos,int spos)
        {
            int tmp;
            tmp = Heap[fpos];
            Heap[fpos] = Heap[spos];
            Heap[spos] = tmp;
        }

        private void maxHeapify(int position)
        {
            if (!isLeaf(position))
            { 
                if ( Heap[position] < Heap[leftChild(position)]  || Heap[position] < Heap[rightChild(position)])
                {
                    if (Heap[leftChild(position)] > Heap[rightChild(position)])
                    {
                        swap(position, leftChild(position));
                        maxHeapify(leftChild(position));
                    }else
                    {
                        swap(position, rightChild(position));
                        maxHeapify(rightChild(position));
                    }
                }
            }
        }

        public void insert(int element)
        {
            Heap[++size] = element;
            int current = size;

            while(Heap[current] > Heap[parent(current)])
            {
                swap(current,parent(current));
                current = parent(current);
            }	
        }

        public void print()
        {
            for (int i = 1; i <= size / 2; i++ )
            {
                System.out.print(" PARENT : " + Heap[i] + " LEFT CHILD : " + Heap[2*i]
                      + " RIGHT CHILD :" + Heap[2 * i  + 1]);
                System.out.println();
            }
        }

        public void maxHeap()
        {
            for (int position = (size / 2); position >= 1; position--)
            {
                maxHeapify(position);
            }
        }

        public int remove()
        {
            int popped = Heap[FRONT];
            Heap[FRONT] = Heap[size--]; 
            maxHeapify(FRONT);
            return popped;
        }
    
    }
    */
    
}